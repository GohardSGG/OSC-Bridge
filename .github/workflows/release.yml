# .github/workflows/release.yml

name: 'Release: Build Cross-Platform Binaries'

permissions:
  contents: write

# 这个工作流在创建新的 git 标签（如 v1.0.0）时触发
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      # 1. 检出你的代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 设置 Node.js 环境 (用于 npm)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # 你可以根据需要更改 Node.js 版本

      # 3. 安装 Rust 工具链
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # 4. (仅Linux) 安装必要的系统依赖
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      # 5. 安装前端依赖 (使用 npm ci 更快更稳定)
      - name: Install frontend dependencies
        run: npm ci

      # 使用单一的、包含所有功能的 tauri-action 步骤
      - name: Build and Upload Release Assets
        uses: tauri-apps/tauri-action@v0
        env:
          # GITHUB_TOKEN 是必需的，用于向你的仓库推送 Release
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # 提供触发工作流的 Git 标签，这是创建 Release 和上传的唯一关键
          tagName: ${{ github.ref_name }}
          # tauri-action 会自动从 git 标签中获取版本号
          # 例如，如果标签是 v1.0.0，它会自动处理
          releaseName: 'OSC-Bridge __VERSION__' # __VERSION__ 会被替换为应用版本
          releaseBody: '请从下面的 Assets 中下载对应平台的安装包。'
          releaseDraft: false
          prerelease: false 